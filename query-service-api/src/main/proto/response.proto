syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.hypertrace.core.query.service.api";
option java_outer_classname = "QueryResponseProto";

package org.hypertrace.core.query.service;

import "value.proto";
import "google/protobuf/timestamp.proto";

message SubmitAsyncQueryResponse {
  AsyncQueryInfo query_info = 1;
}

message SubmitAsyncQueryGroupResponse {
  // TODO: Reusing AsyncQueryInfo in case of query belonging to a group as well.
  // The async_query_id will be at group level in this case.
  AsyncQueryInfo query_info = 1;
}

message GetAsyncQueriesResponse {
  repeated AsyncQueryInfo queries_info = 1;
}

message GetAsyncQueryResultResponse {
  AsyncQueryResult query_result = 1;
}

message GetAsyncQueryGroupResultResponse {
  // map of query_name and its result in case of group
  map<string, AsyncQueryResult> group_result = 1;
}

message AsyncQueryResult {
  // map of query_name and its result
  ResultSetMetadata result_set_metadata = 1;
  repeated Row row = 2;
}

message AsyncQueryInfo {
  string async_query_id = 1;
  AsyncQueryState state = 2;
  google.protobuf.Timestamp created_timestamp = 3;
  string author = 4;
}

enum AsyncQueryState {
  ASYNC_QUERY_STATE_UNSPECIFIED = 0;

  ASYNC_QUERY_STATE_IN_PROGRESS = 1;
  ASYNC_QUERY_STATE_SUCCEEDED = 2;
  ASYNC_QUERY_STATE_FAILED = 3;
  // TODO: how to power partially completed status?
}
message ColumnMetadata {
  string column_name = 1;
  ValueType value_type = 2;
  //is the value of type array
  bool is_repeated = 3;
}

message ResultSetMetadata {
  repeated ColumnMetadata column_metadata = 1;
}

message ResultSetChunk {
  int32 chunk_id = 1;
  bool is_last_chunk = 3;
  //only present in the first chunk
  ResultSetMetadata result_set_metadata = 4;
  repeated Row row = 5;

  //can be in any chunk.
  bool hasError = 6;
  string errorMessage = 7;
}


message Row {
  repeated Value column = 1;
}
