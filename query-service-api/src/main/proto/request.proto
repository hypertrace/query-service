syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.hypertrace.core.query.service.api";
option java_outer_classname = "QueryRequestProto";

package org.hypertrace.core.query.service;

import "value.proto";

message Expression {
  oneof value {
    ColumnIdentifier columnIdentifier = 1;
    LiteralConstant literal = 2;
    Function function = 3;
    OrderByExpression orderBy = 4;
    AttributeExpression attribute_expression = 5;
  }
}

message SubmitAsyncQueryRequest {
  // TODO: verify if all fields of QueryRequest are applicable
  QueryRequest query_request = 1;
}

message SubmitAsyncQueryGroupRequest {
  // TODO: verify if all fields of QueryRequest are applicable
  QueryRequest query_request = 1;
  // If multiple async queries are a part of same group, UI can fire each async
  // query separately. In this case, each request needs to contain group details
  AsyncQueryGroupDetails group = 2;
}

message AsyncQueryGroupDetails {
  // UUID created by UI
  string group_id = 1;
  // unique name for each query within group
  string query_name = 2;
}

message GetAsyncQueriesRequest {
  // Note that these filters are different than filters within QueryRequest.
  // These are filters for async queries listing
  // TODO: do we need to define a different filter message?
  Filter filter = 1;
}

message GetAsyncQueryResultRequest {
  string async_query_id = 1;
}

message GetAsyncQueryGroupResultRequest {
  string async_query_id = 1;
  // In case of group query, UI can ask for results of multiple queries that
  // belong to the group (referenced by query_name within group)
  repeated string query_names = 2;
}

message QueryRequest {

  repeated string source = 1;
  Filter filter = 2;
  repeated Expression selection = 3;
  repeated Expression aggregation = 4;
  repeated Expression groupBy = 5;
  repeated OrderByExpression orderBy = 6;

  int32 limit = 7;
  int32 offset = 8;
  bool distinctSelections = 9;
}

message Filter {

  Expression lhs = 1;
  Operator operator = 2;
  Expression rhs = 3;
  repeated Filter childFilter = 4;
}

enum Operator {
  AND = 0;
  OR = 1;
  NOT = 2;
  EQ = 3;
  NEQ = 4;
  IN = 5;
  NOT_IN = 6;
  RANGE = 7;
  GT = 8;
  LT = 9;
  GE = 10;
  LE = 11;
  LIKE = 12;
  CONTAINS_KEY = 13;
  CONTAINS_KEYVALUE = 14;
  NOT_CONTAINS_KEY = 15;
  CONTAINS_KEY_LIKE = 16;
}


message Function {
  string functionName = 1;
  repeated Expression arguments = 2;
  string alias = 3;
}

message LiteralConstant {
  Value value = 1;
}

message ColumnIdentifier {

  string columnName = 1;
  string alias = 2;
}

message AttributeExpression {
  string attributeId = 1;
  optional string subpath = 2;
  optional string alias = 3;
}

message OrderByExpression {
  Expression expression = 1;
  SortOrder order = 2;
}

enum SortOrder {
  ASC = 0;
  DESC = 1;
}
