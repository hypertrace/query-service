service.name = "query-service"
service.port = 8090
service.admin.port = 8091
service.config = {
  attribute.client = {
    host = localhost
    host = ${?ATTRIBUTE_SERVICE_HOST_CONFIG}
    port = 9012
    port = ${?ATTRIBUTE_SERVICE_PORT_CONFIG}
  }
  validation = {
    limit = {
      min = 1
      max = 10000
      mode = WARN
    }
  }
  clients = [
    {
      type = broker
      connectionString = "pinotCluster0:8099"
    }
    {
      type = zookeeper
      connectionString = "pinotCluster1:2181"
    }
  ]
  queryRequestHandlersConfig = [
    {
      name = trace-view-handler
      type = pinot
      clientConfig = broker
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        startTimeAttributeName = "Trace.start_time_millis"
        slowQueryThresholdMs = 0
        percentileAggFunction = "PERCENTILE"
        viewDefinition = {
          viewName = RawTraceView
          retentionTimeMillis = 86400000    # 1 day
          mapFields = ["tags"]
          fieldMap = {
            "Trace.id": "trace_id",
            "Trace.attributes.services": "services",
            "Trace.start_time_millis": "start_time_millis",
            "Trace.end_time_millis": "end_time_millis",
            "Trace.duration_millis": "duration_millis",
            "Trace.metrics.num_services": "num_services",
            "Trace.metrics.num_spans": "num_spans",
            "Trace.attributes": "attributes",
            "Trace.metrics": "metrics"
            "Trace.tags": "tags"
          }
        }
      }
    }
    {
      name = span-event-view-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        slowQueryThresholdMs = 100
        percentileAggFunction = "PERCENTILETDIGEST"
        distinctCountAggFunction = "DISTINCTCOUNTHLL"
        viewDefinition = {
          viewName = spanEventView
          mapFields = ["tags"]
          filters = [
            {
              column: "EVENT.isEntrySpan"
              operator: "IN"
              values: ["true", "false"]

            }
          ]
          fieldMap = {
            "EVENT.serviceName": "service_name",
            "EVENT.id": "span_id",
            "EVENT.startTime": "start_time_millis",
            "EVENT.endTime": "end_time_millis",
            "EVENT.traceId": "trace_id",
            "EVENT.parentSpanId": "parent_span_id",
            "EVENT.type": "span_kind",
            "EVENT.statusCode": "status_code",
            "EVENT.spanTags": "tags"
            "EVENT.spanRequestUrl": "request_url",
            "EVENT.duration": "duration_millis",
            "EVENT.displaySpanName": "display_span_name",
            "EVENT.isEntrySpan": "is_entry_span"
          }
        }
      }
    }
    {
      name = entry-span-view-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        slowQueryThresholdMs = 100
        percentileAggFunction = "PERCENTILETDIGEST"
        viewDefinition = {
          viewName = spanEventView
          mapFields = ["tags"]
          filters = [
            {
              column: "EVENT.isEntrySpan"
              operator: "EQ"
              value: "true"
            }
          ]
          fieldMap = {
            "EVENT.serviceName": "service_name",
            "EVENT.id": "span_id",
            "EVENT.startTime": "start_time_millis",
            "EVENT.endTime": "end_time_millis",
            "EVENT.traceId": "trace_id",
            "EVENT.parentSpanId": "parent_span_id",
            "EVENT.type": "span_kind",
            "EVENT.statusCode": "status_code",
            "EVENT.spanTags": "tags"
            "EVENT.spanRequestUrl": "request_url",
            "EVENT.duration": "duration_millis",
            "EVENT.displaySpanName": "display_span_name"
          }
        }
      }
    }

    {
      name = error-entry-span-view-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        slowQueryThresholdMs = 100
        percentileAggFunction = "PERCENTILETDIGEST"
        viewDefinition = {
          viewName = spanEventView
          mapFields = ["tags"]
          filters = [
            {
              column: "EVENT.isEntrySpan"
              operator: "EQ"
              value: "true"
            }
            {
              column: "EVENT.statusCode"
              operator: "IN"
              values: ["500", "401"]
            }
          ]
          fieldMap = {
            "EVENT.serviceName": "service_name",
            "EVENT.id": "span_id",
            "EVENT.startTime": "start_time_millis",
            "EVENT.endTime": "end_time_millis",
            "EVENT.traceId": "trace_id",
            "EVENT.parentSpanId": "parent_span_id",
            "EVENT.type": "span_kind",
            "EVENT.statusCode": "status_code",
            "EVENT.spanTags": "tags"
            "EVENT.spanRequestUrl": "request_url",
            "EVENT.duration": "duration_millis",
            "EVENT.displaySpanName": "display_span_name"
          }
        }
      }
    }
    {
      name = raw-service-view-service-scope-prometheus-handler
      type = prometheus
      clientConfig = ""
      requestHandlerInfo {
        tenantAttributeName = tenant_id
        startTimeAttributeName = "SERVICE.startTime"
        prometheusViewDefinition {
          viewName = rawServiceView
          metricScope = SERVICE
          metricMap {
            numCalls {
              metricName: "num_calls",
              metricType: "GAUGE"
            },
            errorCount {
              metricName: "error_count",
              metricType: "GAUGE"
            }
          }
          attributeMap {
            "SERVICE.id": "service_id",
            "SERVICE.name": "service_name",
            "API.id": "api_id",
            "API.name": "api_name",
            "SERVICE.startTime": "start_time_millis",
            "SERVICE.endTime": "end_time_millis"
          }
        }
      }
    }
    {
      name = raw-service-view-api-scope-prometheus-handler
      type = prometheus
      clientConfig = ""
      requestHandlerInfo {
        tenantAttributeName = tenant_id
        startTimeAttributeName = "API.startTime"
        prometheusViewDefinition {
          viewName = rawServiceView
          metricScope = API
          metricMap {
            numCalls {
              metricName: "num_calls",
              metricType: "GAUGE"
            },
            errorCount {
              metricName: "error_count",
              metricType: "GAUGE"
            }
          }
          attributeMap {
            "SERVICE.id": "service_id",
            "SERVICE.name": "service_name",
            "API.id": "api_id",
            "API.name": "api_name",
            "API.startTime": "start_time_millis",
            "API.endTime": "end_time_millis"
          }
        }
      }
    },
    {
      name = backend-traces-from-bare-span-event-view-aggr-handler
      type = postgres
      clientConfig = postgres
      requestHandlerInfo = {
        tenantColumnName: customer_id
        countColumnName: call_count_aggr
        tableDefinition = {
          tableName = bare-span-event-view-aggr
          fieldMap = {
            "BACKEND_TRACE.backendId" : "backend_id",
            "BACKEND_TRACE.startTime": "bucketed_start_time_millis",
            "EVENT.environment": "environment",
            "EVENT.isBare": "is_bare",
            "EVENT.isSampled": "is_sampled"
          }
        }
      }
    },
    {
      name = backend-traces-from-bare-span-event-view-5min-aggr-handler
      type = postgres
      clientConfig = postgres
      requestHandlerInfo = {
        tenantColumnName: customer_id
        countColumnName: call_count_aggr
        minRequestDuration: "12 hrs"
        tableDefinition = {
          tableName = bare-span-event-view-aggr
          fieldMap = {
            "BACKEND_TRACE.backendId" : "backend_id",
            "BACKEND_TRACE.startTime": "bucketed_start_time_millis",
            "EVENT.environment": "environment",
            "EVENT.isBare": "is_bare",
            "EVENT.isSampled": "is_sampled"
          }
        }
      }
    },
  ]
}