service.name = "query-service"
service.port = 8090
service.admin.port = 8091
service.config = {
  attribute.client = {
    host = localhost
    host = ${?ATTRIBUTE_SERVICE_HOST_CONFIG}
    port = 9012
    port = ${?ATTRIBUTE_SERVICE_PORT_CONFIG}
  }
  validation = {
    limit = {
      min = 1
      max = 10000
      mode = WARN
    }
  }
  clients = [
    {
      type = broker
      connectionString = "pinotCluster0:8099"
    }
    {
      type = zookeeper
      connectionString = "pinotCluster1:2181"
    }
    {
      type = trino
      connectionString = "jdbc:trino://localhost:8080/iceberg/iceberg_gcs"
    }
  ]
  queryRequestHandlersConfig = [
    {
      name = trace-view-handler
      type = pinot
      clientConfig = broker
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        startTimeAttributeName = "Trace.start_time_millis"
        slowQueryThresholdMs = 0
        percentileAggFunction = "PERCENTILE"
        tenantScopedFilters = [
          {
            "tenantId" = "__default"
            "timeRangeAndFilters" = [
              {
                "startTimeMillis" = 1
                "endTimeMillis" = 2
                "filter" : "{\"lhs\": {\"attributeExpression\": {\"attributeId\": \"SERVICE.name\"}}, \"operator\": \"EQ\", \"rhs\": {\"literal\": {\"value\": {\"string\": \"dummyService\"}}}}"
              }
            ]
           }
        ]
        viewDefinition = {
          viewName = RawTraceView
          retentionTimeMillis = 86400000    # 1 day
          mapFields = ["tags"]
          fieldMap = {
            "Trace.id": "trace_id",
            "Trace.attributes.services": "services",
            "Trace.start_time_millis": "start_time_millis",
            "Trace.end_time_millis": "end_time_millis",
            "Trace.duration_millis": "duration_millis",
            "Trace.metrics.num_services": "num_services",
            "Trace.metrics.num_spans": "num_spans",
            "Trace.attributes": "attributes",
            "Trace.metrics": "metrics"
            "Trace.tags": "tags"
          }
        }
      }
    }
    {
      name = span-event-view-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        slowQueryThresholdMs = 100
        startTimeAttributeName = "EVENT.startTime"
        percentileAggFunction = "PERCENTILETDIGEST"
        distinctCountAggFunction = "DISTINCTCOUNTHLL"
        tenantScopedFilters = [
                  {
                    "tenantId" = "__default"
                    "timeRangeAndFilters" = [
                      {
                        "startTimeMillis" = 1
                        "endTimeMillis" = 2
                      }
                    ]
                   }
                ]
        tenantScopedMaskingCriteria = [
          {
            "tenantId": "maskTenant",
            "timeRangeAndMaskValues": [
              {
                "maskValues": [
                  {
                    "attributeId": "EVENT.id",
                    "maskedValue": "*"
                  }
                ]
              },
            ]
          }
        ]
        viewDefinition = {
          viewName = spanEventView
          mapFields = ["tags"]
          filters = [
            {
              column: "EVENT.isEntrySpan"
              operator: "IN"
              values: ["true", "false"]
            }
          ]
          fieldMap = {
            "EVENT.serviceName": "service_name",
            "EVENT.id": "span_id",
            "EVENT.startTime": "start_time_millis",
            "EVENT.endTime": "end_time_millis",
            "EVENT.traceId": "trace_id",
            "EVENT.parentSpanId": "parent_span_id",
            "EVENT.type": "span_kind",
            "EVENT.statusCode": "status_code",
            "EVENT.spanTags": "tags"
            "EVENT.spanRequestUrl": "request_url",
            "EVENT.duration": "duration_millis",
            "EVENT.displaySpanName": "display_span_name",
            "EVENT.isEntrySpan": "is_entry_span"
          }
        }
      }
    }
    {
      name = entry-span-view-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        slowQueryThresholdMs = 100
        percentileAggFunction = "PERCENTILETDIGEST"
        viewDefinition = {
          viewName = spanEventView
          mapFields = ["tags"]
          filters = [
            {
              column: "EVENT.isEntrySpan"
              operator: "EQ"
              value: "true"
            }
          ]
          fieldMap = {
            "EVENT.serviceName": "service_name",
            "EVENT.id": "span_id",
            "EVENT.startTime": "start_time_millis",
            "EVENT.endTime": "end_time_millis",
            "EVENT.traceId": "trace_id",
            "EVENT.parentSpanId": "parent_span_id",
            "EVENT.type": "span_kind",
            "EVENT.statusCode": "status_code",
            "EVENT.spanTags": "tags"
            "EVENT.spanRequestUrl": "request_url",
            "EVENT.duration": "duration_millis",
            "EVENT.displaySpanName": "display_span_name"
          }
        }
      }
    }

    {
      name = error-entry-span-view-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        slowQueryThresholdMs = 100
        percentileAggFunction = "PERCENTILETDIGEST"
        viewDefinition = {
          viewName = spanEventView
          mapFields = ["tags"]
          filters = [
            {
              column: "EVENT.isEntrySpan"
              operator: "EQ"
              value: "true"
            }
            {
              column: "EVENT.statusCode"
              operator: "IN"
              values: ["500", "401"]
            }
          ]
          fieldMap = {
            "EVENT.serviceName": "service_name",
            "EVENT.id": "span_id",
            "EVENT.startTime": "start_time_millis",
            "EVENT.endTime": "end_time_millis",
            "EVENT.traceId": "trace_id",
            "EVENT.parentSpanId": "parent_span_id",
            "EVENT.type": "span_kind",
            "EVENT.statusCode": "status_code",
            "EVENT.spanTags": "tags"
            "EVENT.spanRequestUrl": "request_url",
            "EVENT.duration": "duration_millis",
            "EVENT.displaySpanName": "display_span_name"
          }
        }
      }
    }
    {
      name = raw-service-view-service-scope-prometheus-handler
      type = prometheus
      clientConfig = ""
      requestHandlerInfo {
        tenantAttributeName = tenant_id
        startTimeAttributeName = "SERVICE.startTime"
        prometheusViewDefinition {
          viewName = rawServiceView
          metricScope = SERVICE
          metricMap {
            numCalls {
              metricName: "num_calls",
              metricType: "GAUGE"
            },
            errorCount {
              metricName: "error_count",
              metricType: "GAUGE"
            }
          }
          attributeMap {
            "SERVICE.id": "service_id",
            "SERVICE.name": "service_name",
            "API.id": "api_id",
            "API.name": "api_name",
            "SERVICE.startTime": "start_time_millis",
            "SERVICE.endTime": "end_time_millis"
          }
        }
      }
    }
    {
      name = raw-service-view-api-scope-prometheus-handler
      type = prometheus
      clientConfig = ""
      requestHandlerInfo {
        tenantAttributeName = tenant_id
        startTimeAttributeName = "API.startTime"
        prometheusViewDefinition {
          viewName = rawServiceView
          metricScope = API
          metricMap {
            numCalls {
              metricName: "num_calls",
              metricType: "GAUGE"
            },
            errorCount {
              metricName: "error_count",
              metricType: "GAUGE"
            }
          }
          attributeMap {
            "SERVICE.id": "service_id",
            "SERVICE.name": "service_name",
            "API.id": "api_id",
            "API.name": "api_name",
            "API.startTime": "start_time_millis",
            "API.endTime": "end_time_millis"
          }
        }
      }
    },
    {
      name = backend-traces-from-bare-span-event-view-5min-aggr-handler
      type = postgres
      clientConfig = postgres
      requestHandlerInfo = {
        tenantColumnName: customer_id
        countColumnName: call_count_aggr
        startTimeAttributeName = "BACKEND_TRACE.startTime"
        minRequestDuration: "12h"
        tableDefinition = {
          tableName = bare-span-event-view-aggr-5min
          fieldMap = {
            "BACKEND_TRACE.backendId" : "backend_id",
            "BACKEND_TRACE.startTime": "bucketed_start_time_millis",
            "EVENT.environment": "environment",
            "EVENT.isBare": "is_bare",
            "EVENT.isSampled": "is_sampled"
          }
        }
      }
    },
    {
      name = backend-traces-from-bare-span-event-view-3hrs-aggr-handler
      type = postgres
      clientConfig = postgres
      requestHandlerInfo = {
        tenantColumnName: customer_id
        countColumnName: call_count_aggr
        startTimeAttributeName = "BACKEND_TRACE.startTime"
        minRequestDuration: "3h"
        tableDefinition = {
          tableName = bare-span-event-view-aggr-3hrs
          fieldMap = {
            "BACKEND_TRACE.backendId" : "backend_id",
            "BACKEND_TRACE.startTime": "bucketed_start_time_millis",
            "EVENT.environment": "environment",
            "EVENT.isBare": "is_bare",
            "EVENT.isSampled": "is_sampled"
          }
        }
      }
    },
    {
      name = backend-traces-from-bare-span-event-view-aggr-handler
      type = postgres
      clientConfig = postgres
      requestHandlerInfo = {
        tenantColumnName: customer_id
        countColumnName: call_count_aggr
        startTimeAttributeName = "BACKEND_TRACE.startTime"
        tableDefinition = {
          tableName = bare-span-event-view-aggr
          fieldMap = {
            "BACKEND_TRACE.backendId" : "backend_id",
            "BACKEND_TRACE.startTime": "bucketed_start_time_millis",
            "EVENT.environment": "environment",
            "EVENT.isBare": "is_bare",
            "EVENT.isSampled": "is_sampled"
          }
        }
      }
    }
    {
      name = span-event-view-trino-handler
      type = trino
      clientConfig = trino
      clientConfig = ${?TRINO_CONNECTION_TYPE}
      requestHandlerInfo = {
        tenantColumnName = customer_id
        tableDefinition = {
          tableName = span_event_view_staging_test
          mapFields = ["tags", "request_headers", "request_cookies", "request_params", "response_headers", "response_cookies", "response_cookies_metadata"]
          bytesFields = ["span_id", "api_trace_id", "trace_id", "parent_span_id"]
          arrayFields = ["sensitive_data_types", "user_roles", "ip_types"]
          fieldMap = {
            "EVENT.serviceId": "service_id",
            "EVENT.serviceName" : "service_name",
            "EVENT.apiId" : "api_id",
            "EVENT.apiName" : "api_name",
            "EVENT.apiTraceId" : "api_trace_id",
            "EVENT.id" : "span_id",
            "EVENT.startTime": "start_time_millis",
            "EVENT.endTime": "end_time_millis",
            "EVENT.traceId" : "trace_id",
            "EVENT.parentSpanId" : "parent_span_id",
            "EVENT.type" : "span_kind",
            "EVENT.entryApiId": "entry_api_id",
            "EVENT.protocolName": "protocol_name",
            "EVENT.statusCode": "status_code",
            "EVENT.spanTags" : "tags",
            "EVENT.spanRequestHeaders" : "request_headers",
            "EVENT.spanRequestCookies" : "request_cookies",
            "EVENT.spanRequestParams" : "request_params",
            "EVENT.spanResponseHeaders" : "response_headers",
            "EVENT.spanResponseCookies" : "response_cookies",
            "EVENT.spanResponseCookiesMetadata" : "response_cookies_metadata",
            "EVENT.spanRequestBody" : "request_body",
            "EVENT.spanResponseBody" : "response_body",
            "EVENT.spanRequestMethod" : "request_method",
            "EVENT.spanRequestUrl" : "request_url",
            "EVENT.spanRequestBodyType" : "request_body_type",
            "EVENT.spanResponseBodyType" : "response_body_type",
            "EVENT.httpUrlPath" : "http_url_path",
            "EVENT.duration": "duration_millis",
            "EVENT.displayEntityName": "display_entity_name",
            "EVENT.displaySpanName": "display_span_name",
            "EVENT.errorCount": "error_count",
            "EVENT.exceptionCount": "exception_count",
            "EVENT.userIdentifier": "user_identifier",
            "EVENT.userRoles": "user_roles",
            "EVENT.userScope": "user_scope",
            "EVENT.userCountry": "user_country",
            "EVENT.userState": "user_state",
            "EVENT.userCity": "user_city",
            "EVENT.userLatitude": "user_latitude",
            "EVENT.userLongitude": "user_longitude",
            "EVENT.ipAddress": "ip_address",
            "EVENT.sessionId": "session_id",
            "EVENT.bytesReceived": "bytes_received",
            "EVENT.bytesSent": "bytes_sent",
            "EVENT.spaceIds": "space_ids",
            "EVENT.backendId": "backend_id",
            "EVENT.backendApiId": "backend_api_id",
            "EVENT.backendApiName": "backend_api_name",
            "DOMAIN.id": "domain_id",
            "DOMAIN.name": "domain_name",
            "EVENT.environment": "environment",
            "EVENT.processingMode": "processing_mode",
            "EVENT.isBare": "is_bare",
            "EVENT.isSampled": "is_sampled",
            "EVENT.ipIsProxy": "ip_is_proxy",
            "EVENT.ipIsVpn": "ip_is_vpn",
            "EVENT.ipIsTor": "ip_is_tor",
            "EVENT.ipIsBot": "ip_is_bot",
            "EVENT.ipReputationScore": "ip_reputation_score",
            "EVENT.ipReputationLevel": "ip_reputation_level",
            "EVENT.ipAbuseVelocity": "ip_abuse_velocity",
            "EVENT.ipConnectionType": "ip_connection_type",
            "EVENT.ipAsn": "ip_asn",
            "EVENT.spans": "spans",
            "API.isExternal" : "api_is_external",
            "EVENT.sensitiveDataTypeIds" : "sensitive_data_types",
            "EVENT.ipTypes": "ip_types",
            "EVENT.isIpExternal": "is_ip_external"
          }
        }
      }
    }
    {
      name = domain-service-handler
      type = pinot
      clientConfig = broker
      requestHandlerInfo = {
        tenantColumnName: customer_id
        startTimeAttributeName = "EVENT.startTime"
        tenantScopedFilters = [
                  {
                    "tenantId" = "__default"
                    "timeRangeAndFilters" = [
                      {
                        "filter" : "{\"lhs\": {\"attributeExpression\": {\"attributeId\": \"SERVICE.name\"}}, \"operator\": \"EQ\", \"rhs\": {\"literal\": {\"value\": {\"string\": \"dummyService\"}}}}"
                      }
                    ]
                   }
                ]
        distinctCountAggFunction = DISTINCTCOUNTHLL
        viewDefinition = {
          viewName = domainEventSpanView
          fieldMap = {
            "EVENT.startTime": "start_time_millis",
            "DOMAIN.id": "domain_id",
            "DOMAIN.name": "domain_name",
            "EVENT.environment": "environment"
          }
        }
      }
    }
  ]
}
