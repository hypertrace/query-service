main.class = org.hypertrace.core.query.service.QueryServiceStarter
service.name = query-service
service.port = 8090
service.admin.port = 8091
service.config = {
  attribute.client = {
    host = localhost
    host = ${?ATTRIBUTE_SERVICE_HOST_CONFIG}
    port = 9012
    port = ${?ATTRIBUTE_SERVICE_PORT_CONFIG}
  }
  clients = [
    {
      type = zookeeper
      connectionString = "localhost:2181/pinot/org-views"
      connectionString = ${?ZK_CONNECT_STR}
    }
  ]
  queryRequestHandlersConfig = [
    # Update runtime configuration in helm/values.yaml. Only local test/debug needs the following
    {
      name = trace-view-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        viewDefinition = {
          viewName = rawTraceView
          bytesFields = ["trace_id"]
          fieldMap = {
            "TRACE.id": "trace_id",
            "TRACE.name": "transaction_name",
            "TRACE.startTime": "start_time_millis",
            "TRACE.endTime": "end_time_millis",
            "TRACE.transactionName": "transaction_name",
            "TRACE.services": "services",
            "TRACE.duration": "duration_millis",
            "TRACE.numServices": "num_services",
            "TRACE.numSpans": "num_spans",
            "TRACE.spaceIds": "space_ids"
          }
        }
      }
    }
    {
      name = span-event-view-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        viewDefinition = {
          viewName = spanEventView
          mapFields = ["tags"]
          bytesFields = ["span_id", "api_trace_id", "trace_id", "parent_span_id"]
          fieldMap = {
            "EVENT.serviceId": "service_id",
            "EVENT.serviceName" : "service_name",
            "EVENT.apiId" : "api_id",
            "EVENT.apiName" : "api_name",
            "EVENT.apiTraceId" : "api_trace_id",
            "EVENT.id" : "span_id",
            "EVENT.startTime": "start_time_millis",
            "EVENT.endTime": "end_time_millis",
            "EVENT.traceId" : "trace_id",
            "EVENT.parentSpanId" : "parent_span_id",
            "EVENT.type" : "span_kind",
            "EVENT.entryApiId": "entry_api_id",
            "EVENT.protocolName": "protocol_name",
            "EVENT.statusCode": "status_code",
            "EVENT.spanTags" : "tags"
            "EVENT.spanRequestUrl" : "request_url",
            "EVENT.duration": "duration_millis",
            "EVENT.displayEntityName": "display_entity_name",
            "EVENT.displaySpanName": "display_span_name",
            "EVENT.errorCount": "error_count",
            "EVENT.exceptionCount": "exception_count",
            "EVENT.spaceIds": "space_ids"
          }
        }
      }
    }
    {
      name = service-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        viewDefinition = {
          viewName = rawServiceView
          bytesFields = ["span_id", "trace_id"]
          fieldMap = {
            "SERVICE.startTime": "start_time_millis",
            "SERVICE.endTime": "end_time_millis",
            "SERVICE.id": "service_id",
            "SERVICE.name": "service_name",
            "SERVICE.hostHeader" : "host_header",
            "SERVICE.namespace" : "namespace_name",
            "SERVICE.cluster" : "cluster_name",
            "SERVICE.duration": "duration_millis",
            "SERVICE.errorCount": "error_count",
            "SERVICE.exceptionCount": "exception_count",
            "SERVICE.numCalls": "num_calls",
            "API.isExternal" : "api_is_external",
            "EVENT.spaceIds": "space_ids"
          }
        }
      }
    }
    {
      name = api-traces-view-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        viewDefinition = {
          viewName = spanEventView
          mapFields = ["tags", "request_headers", "request_params", "response_headers"]
          bytesFields = ["span_id", "api_trace_id", "trace_id", "parent_span_id"]
          fieldMap = {
            "API_TRACE.apiName" : "api_name",
            "API_TRACE.apiId" : "api_id",
            "API_TRACE.serviceName" : "service_name",
            "API_TRACE.serviceId": "service_id",
            "SERVICE.hostHeader" : "host_header",
            "API_TRACE.apiTraceId" : "api_trace_id",
            "API_TRACE.startTime": "start_time_millis",
            "API_TRACE.endTime": "end_time_millis",
            "API_TRACE.traceId" : "trace_id",
            "API_TRACE.duration": "duration_millis",
            "API_TRACE.protocol": "protocol_name",
            "API_TRACE.statusCode": "status_code",
            "API_TRACE.apiBoundaryType" : "api_boundary_type",
            "API_TRACE.userAgent" : "user_agent",
            "API_TRACE.requestHeaders" : "request_headers",
            "API_TRACE.requestBody" : "request_body",
            "API_TRACE.responseHeaders" : "response_headers",
            "API_TRACE.responseBody" : "response_body",
            "API_TRACE.tags" : "tags",
            "API_TRACE.status" : "status",
            "API_TRACE.statusMessage" : "status_message",
            "API_TRACE.requestBodyType" : "request_body_type",
            "API_TRACE.responseBodyType" : "response_body_type",
            "API_TRACE.requestMethod" : "request_method",
            "API_TRACE.requestUrl" : "request_url",
            "API_TRACE.calls" : "api_trace_count",
            "API_TRACE.apiHasPii" : "api_has_pii",
            "API_TRACE.userIdentifier" : "user_identifier",
            "API.isExternal" : "api_is_external",
            "API_TRACE.errorCount" : "error_count",
            "API_TRACE.apiDiscoveryState" : "api_discovery_state",
            "API_TRACE.userIdentifier" : "user_identifier",
            "API_TRACE.userRole" : "user_role",
            "API_TRACE.userScore" : "user_score",
            "API_TRACE.spaceIds": "space_ids"
          }
        }
      }
    }
    {
      name = backend-traces-view-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        viewDefinition = {
          viewName = backendEntityView
          mapFields = ["tags", "request_headers", "request_params", "response_headers"]
          bytesFields = ["span_id", "trace_id"]
          fieldMap = {
            "BACKEND_TRACE.backendTraceId" : "backend_trace_id",
            "BACKEND_TRACE.traceId" : "trace_id",
            "BACKEND_TRACE.callerServiceId": "caller_service_id",
            "BACKEND_TRACE.callerApiId": "caller_api_id",
            "BACKEND_TRACE.backendId" : "backend_id",
            "BACKEND_TRACE.name" : "display_name",
            "BACKEND_TRACE.host" : "backend_host",
            "BACKEND_TRACE.port" : "backend_port",
            "BACKEND_TRACE.type" : "backend_protocol",
            "BACKEND_TRACE.path" : "backend_path",
            "BACKEND_TRACE.startTime": "start_time_millis",
            "BACKEND_TRACE.endTime": "end_time_millis",
            "BACKEND_TRACE.duration": "duration_millis",
            "BACKEND_TRACE.statusCode": "status_code",
            "BACKEND_TRACE.status" : "status",
            "BACKEND_TRACE.statusMessage" : "status_message",
            "BACKEND_TRACE.tags" : "tags",
            "BACKEND_TRACE.spaceIds": "space_ids"
          }
        }
      }
    }
    {
      name = interactions-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        viewDefinition = {
          viewName = serviceCallView
          bytesFields = ["trace_id", "server_event_id", "client_event_id"]
          fieldMap = {
            "INTERACTION.startTime": "start_time_millis",
            "INTERACTION.endTime": "end_time_millis",
            "INTERACTION.fromServiceId": "caller_service_id_str",
            "INTERACTION.fromApiId": "caller_api_id_str",
            "INTERACTION.toServiceId": "callee_service_id_str",
            "INTERACTION.toApiId": "callee_api_id_str",
            "INTERACTION.toBackendId": "callee_backend_id",
            "INTERACTION.numCalls": "num_calls",
            "INTERACTION.duration": "duration_millis",
            "INTERACTION.errorCount": "error_count",
            "INTERACTION.fromSpaceIds": "caller_space_ids",
            "INTERACTION.toSpaceIds": "callee_space_ids"
          }
        }
      }
    }
    {
      name = backend-entity-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        viewDefinition = {
          viewName = backendEntityView
          bytesFields = ["span_id", "trace_id"]
          fieldMap = {
            "BACKEND.startTime": "start_time_millis",
            "BACKEND.endTime": "end_time_millis",
            "BACKEND.duration" : "duration_millis",
            "BACKEND.id": "backend_id",
            "BACKEND.name" : "backend_name",
            "BACKEND.host": "backend_host",
            "BACKEND.path": "backend_path",
            "BACKEND.port": "backend_port",
            "BACKEND.type": "backend_protocol",
            "BACKEND.numCalls" : "num_calls",
            "BACKEND.exceptionCount" : "exception_count",
            "BACKEND.errorCount" : "error_count",
            "EVENT.spaceIds": "space_ids"
          }
        }
      }
    }
    {
      name = api-handler
      type = pinot
      clientConfig = zookeeper
      requestHandlerInfo = {
        tenantColumnName = tenant_id
        viewDefinition = {
          viewName = rawServiceView
          bytesFields = ["span_id", "trace_id"]
          fieldMap = {
            "API.startTime": "start_time_millis",
            "API.endTime": "end_time_millis",
            "API.id": "api_id",
            "API.name": "api_name",
            "API.serviceId": "service_id",
            "API.serviceName": "service_name",
            "SERVICE.hostHeader" : "host_header",
            "API.namespace" : "namespace_name",
            "API.cluster" : "cluster_name",
            "API.duration": "duration_millis",
            "API.errorCount": "error_count",
            "API.exceptionCount": "exception_count",
            "API.numCalls": "num_calls",
            "API.isExternal" : "api_is_external",
            "API.apiDiscoveryState" : "api_discovery_state",
            "EVENT.spaceIds": "space_ids"
          }
        }
      }
    }
  ]
}

metrics.reporter {
  prefix = org.hypertrace.core.query.service.QueryService
  names = ["prometheus"]
  console.reportInterval = 30
}
